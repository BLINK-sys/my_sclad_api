import os
import openai
import json
from datetime import datetime
import urllib.parse


# Подключаем OpenAI API
openai.api_key = os.getenv("OPENAI_API_KEY")

client = openai.OpenAI(api_key=openai.api_key)


def gpt_api(file_name, dostavka, zapas):
    """Загружает JSON-файл, передаёт его в GPT для анализа и получает ответ."""

    file_name = urllib.parse.unquote(file_name)
    file_name = f"/var/data/products_json/{file_name}"

    # Проверяем, существует ли файл
    if not os.path.exists(file_name):
        print(f"Ошибка: файл {file_name} не найден!")
        return

    # Загружаем данные из JSON
    with open(file_name, "r", encoding="utf-8") as f:
        data = json.load(f)

    today = datetime.now().strftime("%Y-%m-%d")

    # Новое описание задачи (User prompt)
    task_description = (
        f"Сегодняшняя дата: {today}. Ниже приведён файл с историей приходов (prihod), продаж (sales) "
        "и полем 'stock', которое может быть либо изначальным остатком, либо устаревшим значением. "
        "Твоя задача: 1) понять, каков фактический остаток к {today}, ориентируясь на данные транзакций; "
        "2) определить оптимальную дату (не в прошлом) и количество для следующего заказа у поставщика. "
        f"Срок поставки (lead time) ~{dostavka} дней, и мы обычно держим запас на {zapas} дней продаж. "
        "Если в истории транзакций есть противоречия между 'stock' и 'stock_after', "
        f"используй логику, чтобы выяснить текущий остаток на {today}. "
        "Не заказывай прямо завтра, если остаток очень велик по сравнению со средней скоростью продаж. "
        "Учти, что может быть рост продаж (процентный или иной) от месяца к месяцу, если данные на это указывают. "
        "Старайся избежать дефицита, но и не создавай избыточный запас, чтобы деньги не были заморожены в товаре. "
        "Укажи логику расчёта: учти среднюю скорость продаж, тенденции (рост/спад), всплески. "
        "Верни ответ строго в формате JSON, где ключи: "
        f"'recommended_order_date' (дата заказа после {today}), "
        "'recommended_quantity' (сколько заказать) и "
        "'justification' (поясни расчёты: упомяни среднюю скорость, динамику, срок поставки). "
        "Никакого текста вне JSON."
    )

    # Обновлённое системное сообщение (System prompt)
    system_message = (
        "Ты — опытный аналитик по управлению складскими запасами. "
        "Твоя задача — на основе подробного лога приходов/продаж и поля 'stock' определить реальный остаток "
        f"к {today}, вычислить среднюю скорость продаж (учитывая динамику и всплески), "
        "и спрогнозировать, надо ли и когда заказывать следующую партию товара, а также в каком объёме. "
        f"Не указывай дату заказа, которая прошла (то есть раньше {today}). "
        "Если запас велик, и средняя продажа не столь высокая, не нужно советовать заказ 'прямо сейчас'. "
        f"Учитывай, что мы хотим иметь запас примерно на {zapas} дней вперёд, "
        "с учётом возможного роста % продаж (если он прослеживается в данных предоставленных)"
        f" и {dostavka}-дневного срока поставки. "
        "Ответ — только JSON с ключами: recommended_order_date, recommended_quantity, justification. "
        "В justification опиши логику (средняя скорость, срок поставки, рост или упадок продаж в %, остаток), "
        "без лишних пояснений вне JSON."
    )

    # Формируем запрос к модели
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_message},
            {"role": "user", "content": task_description},
            {
                "role": "user",
                "content": f"Данные в JSON-формате:\n{json.dumps(data, indent=2, ensure_ascii=False)}"
            }
        ]
    )

    # Извлекаем ответ
    result = response.choices[0].message.content

    # Если модель вернёт ответ в код-блоке ```json ... ```
    # — уберём эти обёртки, чтобы на выходе был “чистый” JSON:
    result = result.replace("```json", "").replace("```", "")

    return result
